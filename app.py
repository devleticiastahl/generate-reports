# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14dZk7-yloR_XxVtOydpnI5XzNDmAWWn3
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from io import StringIO

# Configura√ß√µes iniciais
st.set_page_config(layout="wide", page_title="Relat√≥rio Gerencial", page_icon="üìä")
st.title("üìä Relat√≥rio Gerencial Personalizado")

# Fun√ß√£o para carregar dados
@st.cache_data
def load_data(uploaded_file):
    try:
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(uploaded_file, parse_dates=[
                'data_emissao', 'data_inicio', 'data_fim',
                'data_faturamento', 'data_pagamento_fornecedor',
                'data_recebimento_cliente'
            ])
        else:
            st.error("Por favor, carregue um arquivo CSV")
            return None
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {str(e)}")
        return None

# Upload dos arquivos
st.sidebar.header("Carregar Bases de Dados")
uploaded_vendas = st.sidebar.file_uploader("Selecione bd_vendas.csv", type="csv")
uploaded_eventos = st.sidebar.file_uploader("Selecione bd_eventos.csv", type="csv")

if not uploaded_vendas or not uploaded_eventos:
    st.warning("Por favor, carregue ambos os arquivos para continuar")
    st.stop()

# Carregar dados
with st.spinner('Processando dados...'):
    df_vendas = load_data(uploaded_vendas)
    df_eventos = load_data(uploaded_eventos)

    # Verificar se os dados foram carregados corretamente
    if df_vendas is None or df_eventos is None:
        st.error("Erro ao processar os arquivos. Verifique o formato.")
        st.stop()

    # Pr√©-processamento
    df_vendas['ano_mes'] = df_vendas['data_emissao'].dt.to_period('M')
    df_eventos['ano_mes'] = df_eventos['data_evento'].dt.to_period('M')

# Sidebar com filtros
st.sidebar.header("Filtros")
selected_month = st.sidebar.selectbox("Selecione o M√™s", df_vendas['data_emissao'].dt.month_name().unique())
selected_year = st.sidebar.selectbox("Selecione o Ano", df_vendas['data_emissao'].dt.year.unique())

# Converter sele√ß√£o para per√≠odo
selected_period = pd.Period(f"{selected_year}-{datetime.strptime(selected_month, '%B').month:02d}")

# Filtrar dados
filtered_vendas = df_vendas[df_vendas['ano_mes'] == selected_period]
filtered_eventos = df_eventos[df_eventos['ano_mes'] == selected_period]

# Abas para diferentes se√ß√µes do relat√≥rio
tab1, tab2, tab3 = st.tabs(["üìà Vis√£o Geral", "üõí An√°lise de Vendas", "üéØ An√°lise de Eventos"])

with tab1:
    st.header(f"Vis√£o Geral - {selected_month}/{selected_year}")

    if filtered_vendas.empty or filtered_eventos.empty:
        st.warning("N√£o h√° dados dispon√≠veis para o per√≠odo selecionado")
    else:
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        total_vendas = filtered_vendas['valor_fornecedor'].sum() + filtered_vendas['valor_markup'].sum()
        lucro_bruto = filtered_vendas['valor_markup'].sum()
        total_eventos = filtered_eventos.shape[0]

        col1.metric("Total de Vendas", f"R$ {total_vendas:,.2f}")
        col2.metric("Lucro Bruto", f"R$ {lucro_bruto:,.2f}")
        col3.metric("Total de Eventos", total_eventos)
        col4.metric("Comiss√£o M√©dia", f"{filtered_vendas['pct_comissao'].mean():.2f}%")

        # Gr√°fico combinado
        st.subheader("Desempenho Mensal")
        fig, ax = plt.subplots(figsize=(12, 6))

        # Vendas ao longo do tempo
        monthly_vendas = df_vendas.groupby('ano_mes').agg({
            'valor_fornecedor': 'sum',
            'valor_markup': 'sum'
        }).reset_index()
        monthly_vendas['total_vendas'] = monthly_vendas['valor_fornecedor'] + monthly_vendas['valor_markup']
        monthly_vendas['ano_mes'] = monthly_vendas['ano_mes'].dt.to_timestamp()

        ax.plot(monthly_vendas['ano_mes'], monthly_vendas['total_vendas'],
                label='Vendas', marker='o', color='royalblue')

        # Eventos ao longo do tempo (normalizado para escala)
        monthly_eventos = df_eventos.groupby('ano_mes').size().reset_index(name='total_eventos')
        monthly_eventos['ano_mes'] = monthly_eventos['ano_mes'].dt.to_timestamp()

        ax2 = ax.twinx()
        ax2.plot(monthly_eventos['ano_mes'], monthly_eventos['total_eventos'],
                 label='Eventos', marker='s', color='orange')

        ax.set_title("Evolu√ß√£o de Vendas e Eventos")
        ax.set_ylabel("Vendas (R$)", color='royalblue')
        ax2.set_ylabel("N√∫mero de Eventos", color='orange')
        ax.tick_params(axis='x', rotation=45)

        # Adicionar linha para o per√≠odo selecionado
        selected_date = selected_period.to_timestamp()
        ax.axvline(x=selected_date, color='red', linestyle='--', alpha=0.5)

        # Unificar legendas
        lines, labels = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines + lines2, labels + labels2, loc='upper left')

        st.pyplot(fig)

with tab2:
    st.header(f"An√°lise de Vendas - {selected_month}/{selected_year}")

    if filtered_vendas.empty:
        st.warning("N√£o h√° dados de vendas para o per√≠odo selecionado")
    else:
        # An√°lise por categoria
        st.subheader("Desempenho por Categoria")
        cat_data = filtered_vendas.groupby('categoria_produto').agg({
            'valor_fornecedor': 'sum',
            'valor_markup': 'sum',
            'valor_taxas': 'sum'
        }).reset_index()

        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(
            data=cat_data,
            x='categoria_produto',
            y='valor_markup',
            hue='categoria_produto',
            palette='viridis',
            legend=False,
            ax=ax
        )
        ax.set_title("Lucro por Categoria de Produto")
        ax.set_ylabel("Lucro (R$)")
        ax.set_xlabel("")
        ax.tick_params(axis='x', rotation=45)
        st.pyplot(fig)

        # Top 10 produtos
        st.subheader("Top 10 Produtos por Lucratividade")
        top_products = filtered_vendas.groupby('produto').agg({
            'valor_markup': 'sum'
        }).nlargest(10, 'valor_markup').reset_index()

        fig2, ax2 = plt.subplots(figsize=(10, 6))
        sns.barplot(
            data=top_products,
            y='produto',
            x='valor_markup',
            palette='rocket',
            ax=ax2
        )
        ax2.set_title("Produtos Mais Lucrativos")
        ax2.set_xlabel("Lucro (R$)")
        ax2.set_ylabel("")
        st.pyplot(fig2)

with tab3:
    st.header(f"An√°lise de Eventos - {selected_month}/{selected_year}")

    if filtered_eventos.empty:
        st.warning("N√£o h√° dados de eventos para o per√≠odo selecionado")
    else:
        # An√°lise de tipos de evento
        st.subheader("Distribui√ß√£o de Tipos de Evento")
        event_types = filtered_eventos['tipo_evento'].value_counts().reset_index()
        event_types.columns = ['Tipo de Evento', 'Quantidade']

        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(
            data=event_types,
            y='Tipo de Evento',
            x='Quantidade',
            palette='mako',
            ax=ax
        )
        ax.set_title("Tipos de Evento Realizados")
        ax.set_xlabel("N√∫mero de Eventos")
        ax.set_ylabel("")
        st.pyplot(fig)

        # Mapa de localiza√ß√£o (exemplo)
        st.subheader("Localiza√ß√£o dos Eventos")
        if 'local' in filtered_eventos.columns:
            loc_counts = filtered_eventos['local'].value_counts().reset_index()
            loc_counts.columns = ['Local', 'Quantidade']
            st.dataframe(loc_counts)
        else:
            st.info("A coluna 'local' n√£o foi encontrada nos dados de eventos")

# Rodap√©
st.markdown("---")
st.caption(f"Relat√≥rio gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')} | "
           f"Dados carregados: {uploaded_vendas.name} e {uploaded_eventos.name}")